#version 430 core

struct VoxelVertex
{
    // change alignment later for padding
    vec3 position;
    float padding;
    vec2 texCoord;
    vec2 padding2;
    vec3 normal;
    uint materialId;
};

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(std430, binding = 0) buffer voxels
{
    // 32 cube with 1 voxel of padding on each side
    uint[34][34][34] voxel;
};

layout(std430, binding = 1) buffer vertexOut
{
    VoxelVertex vertices[96];
};

shared uint vertexCount = 0;

void main()
{
    uint voxelType = voxel[gl_GlobalInvocationID.x + 1][gl_GlobalInvocationID.y][gl_GlobalInvocationID.z];
    // if (voxelType == 0)
    //{
    //    return;
    //}

    if (vertexCount > 90)
    {
        return;
    }
    uint firstIndex = atomicAdd(vertexCount, 6);
    vertices[firstIndex] =      VoxelVertex(gl_GlobalInvocationID, 0.0, vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 1.0, 0.0), firstIndex);
    vertices[firstIndex + 1] =  VoxelVertex(gl_GlobalInvocationID + uvec3(1, 0, 0), 0.0, vec2(1.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 1.0, 0.0), 1);
    vertices[firstIndex + 2] =  VoxelVertex(gl_GlobalInvocationID + uvec3(0, 1, 0), 0.0, vec2(0.0, 1.0), vec2(0.0, 0.0), vec3(0.0, 1.0, 0.0), voxelType);
    vertices[firstIndex + 3] =  VoxelVertex(gl_GlobalInvocationID + uvec3(1, 1, 0), 0.0, vec2(1.0, 1.0), vec2(0.0, 0.0), vec3(0.0, 1.0, 0.0), voxelType);
    vertices[firstIndex + 4] =  VoxelVertex(gl_GlobalInvocationID + uvec3(0, 1, 0), 0.0, vec2(0.0, 1.0), vec2(0.0, 0.0), vec3(0.0, 1.0, 0.0), voxelType);
    vertices[firstIndex + 5] =  VoxelVertex(gl_GlobalInvocationID + uvec3(1, 1, 0), 0.0, vec2(1.0, 1.0), vec2(0.0, 0.0), vec3(0.0, 1.0, 0.0), voxelType);
}